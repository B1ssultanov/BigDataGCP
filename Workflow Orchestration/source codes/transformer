import pandas as pd

if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@transformer
def transform(data, *args, **kwargs):
    """
    Template code for a transformer block.

    Add more parameters to this function if this block has multiple parent blocks.
    There should be one parameter for each output variable from each parent block.

    Args:
        data: The output from the upstream parent block
        args: The output from any additional upstream blocks (if applicable)

    Returns:
        Anything (e.g. data frame, dictionary, array, int, str, etc.)
    """
    # Specify your transformation logic here
    data = data[data['passenger_count']>0]
    data = data[data['trip_distance']>0]

    data['lpep_pickup_date'] = data["lpep_pickup_datetime"].dt.date

# ['VendorID', 'lpep_pickup_datetime', 'lpep_dropoff_datetime',
#    'store_and_fwd_flag', 'RatecodeID', 'PULocationID', 'DOLocationID',
#    'passenger_count', 'trip_distance', 'fare_amount', 'extra', 'mta_tax',
#    'tip_amount', 'tolls_amount', 'ehail_fee', 'improvement_surcharge',
#    'total_amount', 'payment_type', 'trip_type', 'congestion_surcharge']

# columns to change: 
# VendorID, RatecodeID, PULocationID, DOLocationID

    data.rename(columns = {
        'VendorID':'vendor_id',
        'RatecodeID': 'ratecode_id',
        'PULocationID': 'pul_id',
        'DOLocationID': 'dol_id'
    }, inplace = True) 

    return data


@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'

@test
def test_column(output, *args) -> None:
    assert 'vendor_id' in output, 'column vendor_id exists' 

@test
def test_pass_count(output, *args) -> None:
    print((output[output['passenger_count'] > 0].count() == output.count()).any)
    # assert output[output['passenger_count'] > 0].count() == output.count(), 'passenger count is bigger than 0'

@test
def test_trip_dist(output, *args) -> None:
    assert output[output['trip_distance'] > 0].count() == output.count(), 'trip distance is bigger than 0'
